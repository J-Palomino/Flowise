ARG NODE_VERSION=20
FROM node:${NODE_VERSION} AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy package files
COPY package.json ./
COPY packages ./packages/
COPY lerna.json ./
COPY tsconfig.json ./
COPY turbo.json ./

# Install dependencies
RUN npm install
# Build
RUN npm run build

# Stage 2: Runtime stage
FROM node:${NODE_VERSION}-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    chromium \
    git \
    python3 \
    python3-pip \
    make \
    g++ \
    build-essential \
    libcairo2-dev \
    libpango1.0-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set the environment variable for Puppeteer to find Chromium
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium

# Copy built files from builder stage
COPY --from=builder /app/packages/ui/dist /app/packages/ui/dist
COPY --from=builder /app/packages/components/dist /app/packages/components/dist
COPY --from=builder /app/packages/api/dist /app/packages/api/dist
COPY --from=builder /app/packages/server/dist /app/packages/server/dist

# Copy package files
COPY package.json ./
COPY packages/ui/package.json ./packages/ui/
COPY packages/components/package.json ./packages/components/
COPY packages/api/package.json ./packages/api/
COPY packages/server/package.json ./packages/server/

# Install production dependencies only
RUN npm install --production

# Set environment variables
ENV PORT=12000
ENV DAISY_USERNAME=admin
ENV DAISY_PASSWORD=password
ENV DATABASE_TYPE=sqlite
ENV DATABASE_URL=file:./database.sqlite
ENV CORS_ORIGIN=*
ENV IFRAME_ORIGINS=*
ENV NODE_ENV=production

# Expose the port
EXPOSE 12000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:12000/ || exit 1

# Start the server
CMD ["node", "packages/server/dist/index.js"]